{"version":3,"sources":["angular-nz-input-formats.js"],"names":["window","angular","undefined","NZInputFormats","module","SimpleInputMask","mask","maskChars","this","require","restrict","link","name","options","*","A","9","scope","elem","ctrl","document","lastLen","setMask","bind","doLink","prototype","split","parser","val","Factory","$document","inst","attrs","$observe","processAttributeValue","$formatters","push","formatter","$parsers","$validators","validator","value","$eval","extend","$$parseAndValidate","output","_this","formatted","rawPos","some","maskChar","length","hasOwnProperty","charAt","input","inputChars","newInputLength","parsedParts","every","nextInputChar","match","shift","parsed","join","caretPosition","selectionStart","currentPositionIsEditable","$setViewValue","activeElement","selectionEnd","$viewValue","directive","__extends","d","b","__","constructor","p","NZBankNumber","_super","call","shortMask","longMask","strict","prefixes","01","from","to","12","02","31","25","30","38","08","06","11","21","15","18","16","20","14","13","19","17","22","23","29","24","03","replace","substr","superVal","bankCode","bank","branch","branchNumber","Number","NZIrdNumber","Extract","CheckValidRange","base","CalculateCheckDigit","matches","String","trim","asNumber","expected","weighting","checkDigit","CalculateCheckDigitFor","ReCalculateCheckDigit","sum","i","remainder","NZPhoneNumber","defaultMask","mobileMask","landlineMask","specialMask","minLength","raw"],"mappings":"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","file":"angular-nz-input-formats.min.js","sourcesContent":["/*!\n * angular-nz-input-formats\n * Angular directives to validate and format NZ-specific input types\n * @version v0.1.1\n * @link https://github.com/nikrolls/angular-nz-input-formats\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n(function(window, angular, undefined){///<reference path=\"../definitions\\angularjs\\angular.d.ts\"/>\nvar NZInputFormats;\n(function (NZInputFormats) {\n    NZInputFormats.module = angular.module('nzInputFormats', []);\n})(NZInputFormats || (NZInputFormats = {}));\n\n///<reference path=\"../definitions\\angularjs\\angular.d.ts\"/>\n///<reference path=\"angular-nz-input-formats.ts\"/>\nvar NZInputFormats;\n(function (NZInputFormats) {\n    var SimpleInputMask = (function () {\n        function SimpleInputMask(mask, maskChars) {\n            if (mask === void 0) { mask = null; }\n            if (maskChars === void 0) { maskChars = null; }\n            // Directive properties\n            this.require = 'ngModel';\n            this.restrict = 'A';\n            this.link = null;\n            this.name = undefined;\n            this.options = {\n                mask: null\n            };\n            this.mask = null;\n            this.maskChars = {\n                '*': /./,\n                'A': /[A-Za-z]/,\n                '9': /[0-9]/\n            };\n            this.scope = null;\n            this.elem = null;\n            this.ctrl = null;\n            this.document = null;\n            this.lastLen = 0;\n            this.setMask(mask);\n            if (maskChars) {\n                this.maskChars = maskChars;\n            }\n            this.link = angular.bind(this, this.doLink);\n        }\n        SimpleInputMask.prototype.setMask = function (mask) {\n            if (mask !== this.options['mask']) {\n                this.mask = mask.split('');\n                this.options['mask'] = mask;\n                if (this.elem) {\n                    this.parser(this.elem.val());\n                }\n            }\n        };\n        SimpleInputMask.Factory = function ($document) {\n            var inst = new SimpleInputMask();\n            inst.document = $document[0];\n            return inst;\n        };\n        SimpleInputMask.prototype.doLink = function (scope, elem, attrs, ctrl) {\n            this.scope = scope;\n            this.elem = elem;\n            this.ctrl = ctrl;\n            attrs.$observe(this.name, angular.bind(this, this.processAttributeValue));\n            ctrl.$formatters.push(angular.bind(this, this.formatter));\n            ctrl.$parsers.push(angular.bind(this, this.parser));\n            ctrl.$validators[this.name] = angular.bind(this, this.validator);\n        };\n        SimpleInputMask.prototype.processAttributeValue = function (value) {\n            var options = this.scope.$eval(value);\n            if (options) {\n                if (options['mask']) {\n                    this.setMask(options['mask']);\n                }\n                this.options = angular.extend(this.options, options);\n                this.ctrl.$$parseAndValidate();\n            }\n        };\n        SimpleInputMask.prototype.formatter = function (output) {\n            var _this = this;\n            if (output === void 0) { output = ''; }\n            if (!this.mask) {\n                // Without a mask we have nothing to do\n                return output;\n            }\n            var formatted = '';\n            var rawPos = 0;\n            this.mask.some(function (maskChar) {\n                if (rawPos >= output.length) {\n                    return true;\n                }\n                if (_this.maskChars.hasOwnProperty(maskChar)) {\n                    formatted += output.charAt(rawPos++);\n                }\n                else {\n                    formatted += maskChar;\n                }\n            });\n            return formatted;\n        };\n        SimpleInputMask.prototype.parser = function (input) {\n            var _this = this;\n            if (input === void 0) { input = ''; }\n            if (!this.mask) {\n                // Without a mask we have nothing to do\n                return input;\n            }\n            var inputChars = input.split('');\n            var newInputLength = input.length;\n            var parsedParts = [];\n            this.mask.every(function (maskChar) {\n                var nextInputChar = inputChars[0];\n                if (_this.maskChars.hasOwnProperty(maskChar)) {\n                    while (inputChars.length && !inputChars[0].match(_this.maskChars[maskChar])) {\n                        inputChars.shift();\n                    }\n                    if (inputChars.length) {\n                        parsedParts.push(inputChars.shift());\n                    }\n                }\n                else if (nextInputChar === maskChar) {\n                    inputChars.shift();\n                }\n                return inputChars.length > 0;\n            });\n            var parsed = parsedParts.join('');\n            var formatted = this.formatter(parsed);\n            var caretPosition = this.elem[0].selectionStart;\n            if (newInputLength > this.lastLen) {\n                var maskChar = this.mask[caretPosition - 1];\n                var currentPositionIsEditable = this.maskChars.hasOwnProperty(maskChar);\n                if (currentPositionIsEditable) {\n                    if (!input.charAt(caretPosition - 1).match(this.maskChars[maskChar])) {\n                        caretPosition--;\n                    }\n                }\n                else {\n                    while (caretPosition < formatted.length\n                        && !this.maskChars.hasOwnProperty(this.mask[caretPosition - 1])) {\n                        caretPosition++;\n                    }\n                }\n            }\n            this.lastLen = formatted.length;\n            this.elem.val(formatted);\n            this.ctrl.$setViewValue(formatted);\n            if (this.document.activeElement === this.elem[0]) {\n                this.elem[0].selectionStart = this.elem[0].selectionEnd = caretPosition;\n            }\n            return parsed;\n        };\n        SimpleInputMask.prototype.validator = function () {\n            if (typeof this.ctrl.$viewValue === 'undefined' || this.ctrl.$viewValue === '') {\n                // No validation for an undefined model value\n                return true;\n            }\n            if (!this.mask) {\n                return true;\n            }\n            else {\n                return this.ctrl.$viewValue.length === this.mask.length;\n            }\n        };\n        return SimpleInputMask;\n    })();\n    NZInputFormats.SimpleInputMask = SimpleInputMask;\n    NZInputFormats.module.directive('nzSimpleInputMask', ['$document', SimpleInputMask.Factory]);\n})(NZInputFormats || (NZInputFormats = {}));\n\n///<reference path=\"angular-nz-input-formats.ts\"/>\n///<reference path=\"simple-input-mask.directive.ts\"/>\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar NZInputFormats;\n(function (NZInputFormats) {\n    var NZBankNumber = (function (_super) {\n        __extends(NZBankNumber, _super);\n        function NZBankNumber() {\n            _super.call(this);\n            this.shortMask = '99-9999-9999999-99';\n            this.longMask = '99-9999-9999999-999';\n            this.options = {\n                mask: null,\n                strict: true\n            };\n            this.prefixes = {\n                '01': {\n                    // ANZ\n                    from: 1,\n                    to: 5699\n                },\n                '12': {\n                    // ASB\n                    from: 3000,\n                    to: 3499\n                },\n                '02': {\n                    // BNZ / The Cooperative Bank\n                    from: 1,\n                    to: 1299\n                },\n                '31': {\n                    // Citibank\n                    from: 2800,\n                    to: 2849\n                },\n                '25': {\n                    // ANZ, ex National Bank of New Zealand (ex Countrywide)\n                    from: 2500,\n                    to: 2599\n                },\n                '30': {\n                    // HSBC\n                    from: 2900,\n                    to: 2956\n                },\n                '38': {\n                    // Kiwibank\n                    from: 9000,\n                    to: 9499\n                },\n                '08': {\n                    // National Australia Bank\n                    from: 0,\n                    to: 9999\n                },\n                '06': {\n                    // ANZ, ex National Bank of New Zealand\n                    from: 1,\n                    to: 1499\n                },\n                '11': {\n                    // ANZ, ex PostBank\n                    from: 5000,\n                    to: 8999\n                },\n                '21': {\n                    // Trust Bank Auckland\n                    from: 4800,\n                    to: 4899\n                },\n                '15': {\n                    // TSB Bank\n                    from: 3900,\n                    to: 3999\n                },\n                '18': {\n                    // Trust Bank Bay of Plenty\n                    from: 3500,\n                    to: 3599\n                },\n                '16': {\n                    // Trust Bank Canterbury\n                    from: 4400,\n                    to: 4499\n                },\n                '20': {\n                    // Trust Bank Central\n                    from: 4100,\n                    to: 4199\n                },\n                '14': {\n                    // Trust Bank Otago\n                    from: 4700,\n                    to: 4799\n                },\n                '13': {\n                    // Trust Bank Southland\n                    from: 4900,\n                    to: 4799\n                },\n                '19': {\n                    // Trust Bank South Canterbury\n                    from: 4600,\n                    to: 4649\n                },\n                '17': {\n                    // Trust Bank Waikato\n                    from: 3300,\n                    to: 3399\n                },\n                '22': {\n                    // Trust Bank Wanganui\n                    from: 4000,\n                    to: 4049\n                },\n                '23': {\n                    // Trust Bank Wellington\n                    from: 3700,\n                    to: 3799\n                },\n                '29': {\n                    // United Bank\n                    from: 0,\n                    to: 9999\n                },\n                '24': {\n                    // Westland Bank\n                    from: 4300,\n                    to: 4349\n                },\n                '03': {\n                    // Westpac / RaboBank New Zealand / NZACU\n                    from: 1,\n                    to: 1999\n                }\n            };\n            this.setMask(this.shortMask);\n        }\n        NZBankNumber.Factory = function ($document) {\n            var inst = new NZBankNumber();\n            inst.document = $document[0];\n            return inst;\n        };\n        NZBankNumber.prototype.parser = function (input) {\n            if (input.replace(/\\D/g, '').length <= 15) {\n                this.setMask(this.shortMask);\n            }\n            else {\n                this.setMask(this.longMask);\n            }\n            var parsed = _super.prototype.parser.call(this, input);\n            if (parsed.length === 15) {\n                // We need to pad the last two digits with a zero\n                parsed = parsed.substr(0, 13) + '0' + parsed.substr(-2);\n            }\n            return parsed;\n        };\n        NZBankNumber.prototype.validator = function () {\n            var superVal = _super.prototype.validator.call(this);\n            if (!this.options['strict']) {\n                return superVal;\n            }\n            var value = this.ctrl.$viewValue;\n            if (value === 'undefined' || value === '') {\n                // No validation for an undefined model value\n                return true;\n            }\n            value = value.replace(/\\D/g, '');\n            if (value.length < 15 || value.length > 16) {\n                return false;\n            }\n            var bankCode = value.substr(0, 2);\n            if (this.prefixes.hasOwnProperty(bankCode)) {\n                var bank = this.prefixes[bankCode];\n                var branch = value.substr(2, 4);\n                if (branch.length === 4) {\n                    var branchNumber = Number(branch);\n                    return superVal && branchNumber >= bank.from && branchNumber <= bank.to;\n                }\n            }\n            return false;\n        };\n        return NZBankNumber;\n    })(NZInputFormats.SimpleInputMask);\n    NZInputFormats.NZBankNumber = NZBankNumber;\n    NZInputFormats.module.directive('nzBankNumber', ['$document', NZBankNumber.Factory]);\n})(NZInputFormats || (NZInputFormats = {}));\n\n///<reference path=\"angular-nz-input-formats.ts\"/>\n///<reference path=\"simple-input-mask.directive.ts\"/>\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar NZInputFormats;\n(function (NZInputFormats) {\n    var NZIrdNumber = (function (_super) {\n        __extends(NZIrdNumber, _super);\n        function NZIrdNumber() {\n            _super.call(this);\n            this.shortMask = '99-999-999';\n            this.longMask = '999-999-999';\n            this.setMask(this.shortMask);\n        }\n        NZIrdNumber.Factory = function ($document) {\n            var inst = new NZIrdNumber();\n            inst.document = $document[0];\n            return inst;\n        };\n        NZIrdNumber.prototype.parser = function (input) {\n            if (input.replace(/\\D/g, '').length <= 8) {\n                this.setMask(this.shortMask);\n            }\n            else {\n                this.setMask(this.longMask);\n            }\n            return _super.prototype.parser.call(this, input);\n        };\n        NZIrdNumber.prototype.validator = function () {\n            if (typeof this.ctrl.$viewValue === 'undefined' || this.ctrl.$viewValue === '') {\n                // No validation for an undefined model value\n                return true;\n            }\n            var input = NZIrdNumber.Extract(this.ctrl.$viewValue);\n            if (!input) {\n                return false;\n            }\n            if (!NZIrdNumber.CheckValidRange(input)) {\n                return false;\n            }\n            // Remove the check digit\n            var base = input.substr(0, 8);\n            return NZIrdNumber.CalculateCheckDigit(base, input.substr(-1));\n        };\n        NZIrdNumber.Extract = function (input) {\n            var matches = String(input).trim().match(/(?:\\d{8,9}|\\d{2,3}-\\d{3}-\\d{3})/);\n            if (matches && matches.length) {\n                // Pad to 9 digits with a leading 0, if required\n                return ('0' + matches[0].replace(/-/g, '')).substr(-9);\n            }\n            else {\n                return null;\n            }\n        };\n        NZIrdNumber.CheckValidRange = function (input) {\n            var asNumber = Number(input);\n            return asNumber >= 10000000 && asNumber <= 150000000;\n        };\n        NZIrdNumber.CalculateCheckDigit = function (input, expected) {\n            var weighting = [3, 2, 7, 6, 5, 4, 3, 2];\n            var checkDigit = NZIrdNumber.CalculateCheckDigitFor(weighting, input);\n            if (checkDigit === 10) {\n                return NZIrdNumber.ReCalculateCheckDigit(input, expected);\n            }\n            else {\n                return checkDigit === Number(expected);\n            }\n        };\n        NZIrdNumber.ReCalculateCheckDigit = function (input, expected) {\n            var weighting = [7, 4, 3, 2, 5, 2, 7, 6];\n            var checkDigit = NZIrdNumber.CalculateCheckDigitFor(weighting, input);\n            if (checkDigit === 10) {\n                return false;\n            }\n            else {\n                return checkDigit === Number(expected);\n            }\n        };\n        NZIrdNumber.CalculateCheckDigitFor = function (weighting, input) {\n            var sum = 0;\n            for (var i = 0; i < weighting.length; i++) {\n                sum += Number(input.charAt(i)) * weighting[i];\n            }\n            var remainder = sum % 11;\n            if (remainder === 0) {\n                return 0;\n            }\n            else {\n                return 11 - remainder;\n            }\n        };\n        return NZIrdNumber;\n    })(NZInputFormats.SimpleInputMask);\n    NZInputFormats.NZIrdNumber = NZIrdNumber;\n    NZInputFormats.module.directive('nzIrdNumber', ['$document', NZIrdNumber.Factory]);\n})(NZInputFormats || (NZInputFormats = {}));\n\n///<reference path=\"angular-nz-input-formats.ts\"/>\n///<reference path=\"simple-input-mask.directive.ts\"/>\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar NZInputFormats;\n(function (NZInputFormats) {\n    var NZPhoneNumber = (function (_super) {\n        __extends(NZPhoneNumber, _super);\n        function NZPhoneNumber() {\n            _super.call(this);\n            this.defaultMask = '999999999999';\n            this.mobileMask = '999 999 999 999';\n            this.landlineMask = '99 999 9999';\n            this.specialMask = '9999 999 999 9999';\n            this.minLength = 0;\n            this.setMask(this.defaultMask);\n        }\n        NZPhoneNumber.Factory = function ($document) {\n            var inst = new NZPhoneNumber();\n            inst.document = $document[0];\n            return inst;\n        };\n        NZPhoneNumber.prototype.parser = function (input) {\n            var raw = input.replace(/\\D/g, '');\n            if (raw.match(/^0[89]0/)) {\n                this.setMask(this.specialMask);\n                this.minLength = 10;\n            }\n            else if (raw.match(/^02/)) {\n                this.setMask(this.mobileMask);\n                this.minLength = 9;\n            }\n            else if (raw.match(/^0[34679]/)) {\n                this.setMask(this.landlineMask);\n                this.minLength = 9;\n            }\n            else {\n                this.setMask(this.defaultMask);\n                this.minLength = 9;\n            }\n            return _super.prototype.parser.call(this, input);\n        };\n        NZPhoneNumber.prototype.validator = function () {\n            var value = this.ctrl.$viewValue;\n            if (value === 'undefined' || value === '') {\n                // No validation for an undefined model value\n                return true;\n            }\n            value = value.replace(/\\D/g, '');\n            return value.length >= this.minLength;\n        };\n        return NZPhoneNumber;\n    })(NZInputFormats.SimpleInputMask);\n    NZInputFormats.NZPhoneNumber = NZPhoneNumber;\n    NZInputFormats.module.directive('nzPhoneNumber', ['$document', NZPhoneNumber.Factory]);\n})(NZInputFormats || (NZInputFormats = {}));\n})(window, window.angular);"],"sourceRoot":"/source/"}